# -*- coding: utf-8 -*-
"""MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yKWh_0ERRMZTnx4GTvxeucKjmkv2tudv
"""

import numpy as np
import matplotlib.pyplot as plt
import keras
import random
import requests
import cv2
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
from keras.utils.np_utils import to_categorical
from PIL import Image

np.random.seed(0)

(X_train, y_train),(X_test, y_test) = mnist.load_data()

print(X_train.shape)
print(X_test.shape)

print(X_train[0][10]) #getting a feel for it
print(X_train.shape[1:])

assert(X_train.shape[0] == y_train.shape[0]), "The number of images is not equal to the number of labels in training."
assert(X_test.shape[0] == y_test.shape[0]), "The number of images is not equal to the number of labels in testing."
assert(X_train.shape[1:] == (28,28)), "The dimensions of the images are not 28x28 in training."
assert(X_test.shape[1:] == (28,28)), "The dimensions of the images are not 28x28 in testing."

num_of_samples = []
cols = 5
num_classes = 10

fig, axs = plt.subplots(nrows = num_classes, ncols=cols, figsize=(5,10))
fig.tight_layout()

for i in range(cols):
  for j in range(num_classes):
    x_selected = X_train[y_train == j]
    axs[j][i].imshow(x_selected[random.randint(0,len(x_selected -1)),:,:], cmap = plt.get_cmap("gray"))
    axs[j][i].axis('off') # Will show the value of the axis if commented
    if i == 2:
      axs[j][i].set_title(str(j)) #Naming the image set
      num_of_samples.append(len(x_selected))

print(num_of_samples)
plt.figure(figsize=(12,4))
plt.bar(range(0,num_classes),num_of_samples)
plt.title("Distribution of the training dataset")
plt.xlabel("Class number")
plt.ylabel("Number of images")

y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test,10)

X_train = X_train/255
X_test = X_test/255 #normalize

num_pixels = 784
X_train = X_train.reshape(X_train.shape[0],num_pixels)
X_test = X_test.reshape(X_test.shape[0],num_pixels)
print(X_train.shape)
print(X_test.shape)

def create_model():
  model = Sequential()
  model.add(Dense(10, input_dim = num_pixels, activation = 'relu'))
  model.add(Dense(10,activation= 'relu'))
  model.add(Dense(num_classes,activation='softmax'))
  model.compile(Adam(lr=0.01), loss='categorical_crossentropy',metrics = ['accuracy'])
  return model

model = create_model()
print(model.summary())

history = model.fit(X_train, y_train, validation_split=0.1, epochs=10, batch_size=200, verbose=1, shuffle=1)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.legend(['loss','val_loss'])
plt.title('Loss')
plt.xlabel('epoch')

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.legend(['accuracy','val_accuracy'])
plt.title('Accuracy')
plt.xlabel('epoch')

score = model.evaluate(X_test, y_test, verbose= 0)
print(type(score))
print('Test score:',score[0])
print('Test accuracy:',score[1])

#'https://colah.github.io/posts/2014-10-Visualizing-MNIST/img/mnist_pca/MNIST-p1815-4.png'
url = 'https://colah.github.io/posts/2014-10-Visualizing-MNIST/img/mnist_pca/MNIST-p1815-4.png'
response = requests.get(url, stream = True)
print(response)

img = Image.open(response.raw)
plt.imshow(img)

img_array = np.asarray(img)

resized = cv2.resize(img_array, (28,28))
gray_scale = cv2.cvtColor(resized, cv2.COLOR_BGR2GRAY)
image = cv2.bitwise_not(gray_scale)
plt.imshow(image, cmap = plt.get_cmap("gray"))
#print(image)

image = image/255
image = image.reshape(1,784)
#print(image)

prediction = model.predict_classes(image)
print("predicted digit:",str(prediction))

